# =====================================================
# D·ªÆ LI·ªÜU M·∫™U CHO DATABASE B√ÅN S√ÅCH ONLINE
# =====================================================

from database import SessionLocal, engine
from models import *
from sqlalchemy import text
import logging

logger = logging.getLogger(__name__)

def seed_database():
    """Th√™m d·ªØ li·ªáu m·∫´u v√†o database"""
    db = SessionLocal()
    try:
        logger.info("üå± B·∫Øt ƒë·∫ßu th√™m d·ªØ li·ªáu m·∫´u...")
        
        # 1. Th√™m User Roles
        seed_user_roles(db)
        
        # 2. Th√™m Payment Methods
        seed_payment_methods(db)
        
        # 3. Th√™m Categories
        seed_categories(db)
        
        # 4. Th√™m Publishers
        seed_publishers(db)
        
        # 5. Th√™m Suppliers
        seed_suppliers(db)
        
        # 6. Th√™m Authors
        seed_authors(db)
        
        # 7. Th√™m Sample Users
        seed_users(db)
        
        # 8. Th√™m Sample Books
        seed_books(db)
        
        # 9. Th√™m Sample Vouchers
        seed_vouchers(db)
        
        db.commit()
        logger.info("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!")
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå L·ªói khi th√™m d·ªØ li·ªáu m·∫´u: {e}")
        raise
    finally:
        db.close()

def seed_user_roles(db):
    """Th√™m c√°c vai tr√≤ ng∆∞·ªùi d√πng"""
    roles_data = [
        {
            'role_name': 'admin',
            'description': 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
            'permissions': {
                'all': True,
                'manage_users': True,
                'manage_products': True,
                'manage_orders': True,
                'manage_settings': True,
                'view_reports': True
            }
        },
        {
            'role_name': 'staff',
            'description': 'Nh√¢n vi√™n',
            'permissions': {
                'manage_products': True,
                'manage_orders': True,
                'view_reports': True,
                'manage_reviews': True
            }
        },
        {
            'role_name': 'customer',
            'description': 'Kh√°ch h√†ng',
            'permissions': {
                'place_orders': True,
                'write_reviews': True,
                'manage_profile': True,
                'view_orders': True
            }
        }
    ]
    
    for role_data in roles_data:
        existing_role = db.query(UserRole).filter(UserRole.role_name == role_data['role_name']).first()
        if not existing_role:
            role = UserRole(**role_data)
            db.add(role)
    
    logger.info("‚úÖ User roles ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_payment_methods(db):
    """Th√™m c√°c ph∆∞∆°ng th·ª©c thanh to√°n"""
    payment_methods_data = [
        {
            'name': 'Cash on Delivery',
            'description': 'Thanh to√°n khi nh·∫≠n h√†ng',
            'is_active': True
        },
        {
            'name': 'Bank Transfer',
            'description': 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
            'is_active': True
        },
        {
            'name': 'Credit Card',
            'description': 'Th·∫ª t√≠n d·ª•ng',
            'is_active': True
        },
        {
            'name': 'E-Wallet',
            'description': 'V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay)',
            'is_active': True
        },
        {
            'name': 'QR Code',
            'description': 'Qu√©t m√£ QR',
            'is_active': True
        }
    ]
    
    for pm_data in payment_methods_data:
        existing_pm = db.query(PaymentMethod).filter(PaymentMethod.name == pm_data['name']).first()
        if not existing_pm:
            payment_method = PaymentMethod(**pm_data)
            db.add(payment_method)
    
    logger.info("‚úÖ Payment methods ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_categories(db):
    """Th√™m c√°c th·ªÉ lo·∫°i s√°ch"""
    categories_data = [
        {'name': 'Ti·ªÉu thuy·∫øt', 'slug': 'tieu-thuyet', 'description': 'C√°c t√°c ph·∫©m ti·ªÉu thuy·∫øt vƒÉn h·ªçc'},
        {'name': 'Khoa h·ªçc', 'slug': 'khoa-hoc', 'description': 'S√°ch khoa h·ªçc v√† c√¥ng ngh·ªá'},
        {'name': 'L·ªãch s·ª≠', 'slug': 'lich-su', 'description': 'S√°ch v·ªÅ l·ªãch s·ª≠ v√† vƒÉn h√≥a'},
        {'name': 'Kinh t·∫ø', 'slug': 'kinh-te', 'description': 'S√°ch v·ªÅ kinh t·∫ø v√† kinh doanh'},
        {'name': 'Ngh·ªá thu·∫≠t', 'slug': 'nghe-thuat', 'description': 'S√°ch v·ªÅ ngh·ªá thu·∫≠t v√† thi·∫øt k·∫ø'},
        {'name': 'Gi√°o d·ª•c', 'slug': 'giao-duc', 'description': 'S√°ch gi√°o d·ª•c v√† h·ªçc t·∫≠p'},
        {'name': 'S·ª©c kh·ªèe', 'slug': 'suc-khoe', 'description': 'S√°ch v·ªÅ s·ª©c kh·ªèe v√† y t·∫ø'},
        {'name': 'Du l·ªãch', 'slug': 'du-lich', 'description': 'S√°ch v·ªÅ du l·ªãch v√† kh√°m ph√°'},
        {'name': 'Thi·∫øu nhi', 'slug': 'thieu-nhi', 'description': 'S√°ch d√†nh cho tr·∫ª em'},
        {'name': 'T√¢m l√Ω h·ªçc', 'slug': 'tam-ly-hoc', 'description': 'S√°ch v·ªÅ t√¢m l√Ω v√† ph√°t tri·ªÉn b·∫£n th√¢n'},
        {'name': 'C√¥ng ngh·ªá', 'slug': 'cong-nghe', 'description': 'S√°ch v·ªÅ c√¥ng ngh·ªá th√¥ng tin'},
        {'name': 'Ngo·∫°i ng·ªØ', 'slug': 'ngoai-ngu', 'description': 'S√°ch h·ªçc ngo·∫°i ng·ªØ'}
    ]
    
    for cat_data in categories_data:
        existing_cat = db.query(Category).filter(Category.slug == cat_data['slug']).first()
        if not existing_cat:
            category = Category(**cat_data)
            db.add(category)
    
    logger.info("‚úÖ Categories ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_publishers(db):
    """Th√™m c√°c nh√† xu·∫•t b·∫£n"""
    publishers_data = [
        {
            'name': 'Nh√† xu·∫•t b·∫£n Tr·∫ª',
            'contact_email': 'info@nxbtre.com.vn',
            'contact_phone': '02838229339'
        },
        {
            'name': 'Kim ƒê·ªìng',
            'contact_email': 'info@nxbkimdong.com.vn',
            'contact_phone': '02438221351'
        },
        {
            'name': 'Nh√£ Nam',
            'contact_email': 'info@nhanam.vn',
            'contact_phone': '02437712718'
        },
        {
            'name': 'Alpha Books',
            'contact_email': 'info@alphabooks.vn',
            'contact_phone': '02437712718'
        },
        {
            'name': 'First News',
            'contact_email': 'info@firstnews.com.vn',
            'contact_phone': '02838229339'
        },
        {
            'name': 'Th√°i H√† Books',
            'contact_email': 'info@thaihabooks.com',
            'contact_phone': '02437712718'
        }
    ]
    
    for pub_data in publishers_data:
        existing_pub = db.query(Publisher).filter(Publisher.name == pub_data['name']).first()
        if not existing_pub:
            publisher = Publisher(**pub_data)
            db.add(publisher)
    
    logger.info("‚úÖ Publishers ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_suppliers(db):
    """Th√™m c√°c nh√† cung c·∫•p"""
    suppliers_data = [
        {
            'name': 'C√¥ng ty TNHH Ph√°t h√†nh S√°ch ABC',
            'contact_person': 'Nguy·ªÖn VƒÉn A',
            'email': 'contact@abcbooks.com',
            'phone': '0123456789',
            'address': '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM'
        },
        {
            'name': 'Nh√† ph√¢n ph·ªëi S√°ch XYZ',
            'contact_person': 'Tr·∫ßn Th·ªã B',
            'email': 'info@xyzbooks.com',
            'phone': '0987654321',
            'address': '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM'
        },
        {
            'name': 'ƒê·∫°i l√Ω S√°ch DEF',
            'contact_person': 'L√™ VƒÉn C',
            'email': 'sales@defbooks.com',
            'phone': '0369258147',
            'address': '789 ƒê∆∞·ªùng DEF, Qu·∫≠n 5, TP.HCM'
        }
    ]
    
    for sup_data in suppliers_data:
        existing_sup = db.query(Supplier).filter(Supplier.name == sup_data['name']).first()
        if not existing_sup:
            supplier = Supplier(**sup_data)
            db.add(supplier)
    
    logger.info("‚úÖ Suppliers ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_authors(db):
    """Th√™m c√°c t√°c gi·∫£"""
    authors_data = [
        {'pen_name': 'Nguy·ªÖn Nh·∫≠t √Ånh', 'is_active': True},
        {'pen_name': 'Paulo Coelho', 'is_active': True},
        {'pen_name': 'Dale Carnegie', 'is_active': True},
        {'pen_name': 'Stephen Covey', 'is_active': True},
        {'pen_name': 'Yuval Noah Harari', 'is_active': True}
    ]
    
    for auth_data in authors_data:
        existing_auth = db.query(Author).filter(
            Author.pen_name == auth_data['pen_name']
        ).first()
        if not existing_auth:
            author = Author(**auth_data)
            db.add(author)
    
    logger.info("‚úÖ Authors ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_users(db):
    """Th√™m user m·∫´u"""
    users_data = [
        {
            'username': 'admin',
            'email': 'admin@bookstore.com',
            'password_hash': '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8Kz8Kz2',  # admin123
            'first_name': 'Admin',
            'last_name': 'System',
            'role_id': 1,
            'email_verified': True,
            'is_active': True
        },
        {
            'username': 'customer1',
            'email': 'customer@example.com',
            'password_hash': '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8Kz8Kz2',  # customer123
            'first_name': 'Nguy·ªÖn',
            'last_name': 'VƒÉn A',
            'role_id': 3,
            'email_verified': True,
            'is_active': True
        },
        {
            'username': 'staff1',
            'email': 'staff@bookstore.com',
            'password_hash': '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8Kz8Kz2',  # staff123
            'first_name': 'Tr·∫ßn',
            'last_name': 'Th·ªã B',
            'role_id': 2,
            'email_verified': True,
            'is_active': True
        }
    ]
    
    for user_data in users_data:
        existing_user = db.query(User).filter(User.username == user_data['username']).first()
        if not existing_user:
            user = User(**user_data)
            db.add(user)
    
    logger.info("‚úÖ Users ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_books(db):
    """Th√™m s√°ch m·∫´u"""
    # L·∫•y c√°c ID c·∫ßn thi·∫øt
    category_tieu_thuyet = db.query(Category).filter(Category.slug == 'tieu-thuyet').first()
    category_kinh_te = db.query(Category).filter(Category.slug == 'kinh-te').first()
    category_tam_ly = db.query(Category).filter(Category.slug == 'tam-ly-hoc').first()
    
    publisher_tre = db.query(Publisher).filter(Publisher.name == 'Nh√† xu·∫•t b·∫£n Tr·∫ª').first()
    publisher_alpha = db.query(Publisher).filter(Publisher.name == 'Alpha Books').first()
    
    supplier_abc = db.query(Supplier).filter(Supplier.name.like('%ABC%')).first()
    
    books_data = [
        {
            'title': 'T√¥i Th·∫•y Hoa V√†ng Tr√™n C·ªè Xanh',
            'slug': 'toi-thay-hoa-vang-tren-co-xanh',
            'isbn': '9786041000001',
            'description': 'C√¢u chuy·ªán v·ªÅ tu·ªïi th∆° c·ªßa c·∫≠u b√© Thi·ªÅu v√† nh·ªØng k·ª∑ ni·ªám ƒë·∫πp ƒë·∫Ω.',
            'summary': 'M·ªôt t√°c ph·∫©m vƒÉn h·ªçc thi·∫øu nhi n·ªïi ti·∫øng c·ªßa Nguy·ªÖn Nh·∫≠t √Ånh.',
            'publication_year': 2010,
            'pages': 300,
            'weight': 0.4,
            'dimensions': '20x15x2 cm',
            'cover_type': 'paperback',
            'language': 'Vietnamese',
            'price': 85000,
            'original_price': 100000,
            'discount_percentage': 15,
            'cost_price': 50000,
            'stock_quantity': 50,
            'min_stock_level': 5,
            'publisher_id': publisher_tre.id if publisher_tre else 1,
            'supplier_id': supplier_abc.id if supplier_abc else 1,
            'category_id': category_tieu_thuyet.id if category_tieu_thuyet else 1,
            'is_active': True,
            'is_featured': True
        },
        {
            'title': 'Nh√† Gi·∫£ Kim',
            'slug': 'nha-gia-kim',
            'isbn': '9786041000002',
            'description': 'C√¢u chuy·ªán v·ªÅ Santiago, m·ªôt c·∫≠u b√© chƒÉn c·ª´u ƒëi t√¨m kho b√°u c·ªßa m√¨nh.',
            'summary': 'T√°c ph·∫©m n·ªïi ti·∫øng c·ªßa Paulo Coelho v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm √Ω nghƒ©a cu·ªôc s·ªëng.',
            'publication_year': 1988,
            'pages': 200,
            'weight': 0.3,
            'dimensions': '19x13x2 cm',
            'cover_type': 'paperback',
            'language': 'Vietnamese',
            'price': 120000,
            'original_price': 150000,
            'discount_percentage': 20,
            'cost_price': 80000,
            'stock_quantity': 30,
            'min_stock_level': 5,
            'publisher_id': publisher_tre.id if publisher_tre else 1,
            'supplier_id': supplier_abc.id if supplier_abc else 1,
            'category_id': category_tieu_thuyet.id if category_tieu_thuyet else 1,
            'is_active': True,
            'is_bestseller': True
        },
        {
            'title': 'ƒê·∫Øc Nh√¢n T√¢m',
            'slug': 'dac-nhan-tam',
            'isbn': '9786041000003',
            'description': 'Cu·ªën s√°ch kinh ƒëi·ªÉn v·ªÅ ngh·ªá thu·∫≠t giao ti·∫øp v√† ·ª©ng x·ª≠.',
            'summary': 'T√°c ph·∫©m n·ªïi ti·∫øng c·ªßa Dale Carnegie v·ªÅ c√°ch thu ph·ª•c l√≤ng ng∆∞·ªùi.',
            'publication_year': 1936,
            'pages': 400,
            'weight': 0.5,
            'dimensions': '21x15x3 cm',
            'cover_type': 'hardcover',
            'language': 'Vietnamese',
            'price': 150000,
            'original_price': 180000,
            'discount_percentage': 16.67,
            'cost_price': 100000,
            'stock_quantity': 25,
            'min_stock_level': 5,
            'publisher_id': publisher_alpha.id if publisher_alpha else 4,
            'supplier_id': supplier_abc.id if supplier_abc else 1,
            'category_id': category_tam_ly.id if category_tam_ly else 10,
            'is_active': True,
            'is_featured': True
        }
    ]
    
    for book_data in books_data:
        existing_book = db.query(Book).filter(Book.slug == book_data['slug']).first()
        if not existing_book:
            book = Book(**book_data)
            db.add(book)
    
    logger.info("‚úÖ Books ƒë√£ ƒë∆∞·ª£c th√™m!")

def seed_vouchers(db):
    """Th√™m voucher m·∫´u"""
    from datetime import datetime, timedelta
    
    vouchers_data = [
        {
            'code': 'WELCOME10',
            'name': 'Ch√†o m·ª´ng kh√°ch h√†ng m·ªõi',
            'description': 'Gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n',
            'discount_type': 'percentage',
            'discount_value': 10,
            'min_order_amount': 100000,
            'max_discount_amount': 50000,
            'usage_limit': 1000,
            'user_limit': 1,
            'start_date': datetime.now(),
            'end_date': datetime.now() + timedelta(days=30),
            'is_active': True,
            'created_by': 1
        },
        {
            'code': 'FREESHIP',
            'name': 'Mi·ªÖn ph√≠ ship',
            'description': 'Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500k',
            'discount_type': 'free_shipping',
            'discount_value': 0,
            'min_order_amount': 500000,
            'usage_limit': 500,
            'user_limit': 2,
            'start_date': datetime.now(),
            'end_date': datetime.now() + timedelta(days=15),
            'is_active': True,
            'created_by': 1
        },
        {
            'code': 'SAVE50K',
            'name': 'Ti·∫øt ki·ªám 50k',
            'description': 'Gi·∫£m 50k cho ƒë∆°n h√†ng t·ª´ 300k',
            'discount_type': 'fixed_amount',
            'discount_value': 50000,
            'min_order_amount': 300000,
            'usage_limit': 200,
            'user_limit': 1,
            'start_date': datetime.now(),
            'end_date': datetime.now() + timedelta(days=7),
            'is_active': True,
            'created_by': 1
        }
    ]
    
    for voucher_data in vouchers_data:
        existing_voucher = db.query(Voucher).filter(Voucher.code == voucher_data['code']).first()
        if not existing_voucher:
            voucher = Voucher(**voucher_data)
            db.add(voucher)
    
    logger.info("‚úÖ Vouchers ƒë√£ ƒë∆∞·ª£c th√™m!")

if __name__ == "__main__":
    # Ch·∫°y seed data khi ch·∫°y tr·ª±c ti·∫øp file
    seed_database()

